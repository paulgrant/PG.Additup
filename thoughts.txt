

AJAX requests - used axios because of promises.
Coud use standard fetch and wrap in promises.

To increase the difficulty we could have a user input (eg.slider) that is then sent with the request for a new exercise.
This would affect the validation and the placeholder text on inputs.

In API, consider using IActionResult as the return value from the controllers - this would enable HttpStatus codes to be sent, separating out concerns of data.

Used Moq to compliment Unit testing and mockj objects - alternatives = NSubstitute, FakeItEasy

For persistance, I chose to use EF Core and Sqlite, it's light and all contained within VS.  Alternatives would be other SQL variants, Compact, Sql Server or mySql.  

In the React app - implement Redux for single store of Game and exercise state




